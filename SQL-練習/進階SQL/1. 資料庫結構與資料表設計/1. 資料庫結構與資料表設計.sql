/*
  
1. 關聯式資料庫(relational model database)：
	
	1. 欄位之間的關聯性：
		在資料庫中，欄位（column）是資料表中一個特定屬性的集合。
		例如，在一個儲存學生資料的資料表中，可能有「學生編號」、「姓名」、「年齡」等欄位。
		這些欄位在每一筆觀測值（row，也稱為紀錄，record）中是有關聯的，因為它們共同描述了某一個學生的特徵。		
	
	2. 資料表之間的關聯性：
		資料庫中的資料表（table）通常不是獨立存在的，而是通過某種關聯來連接在一起。
		這種關聯通常是透過主鍵（Primary Key, PK）和外鍵（Foreign Key, FK）來實現的。
		
			1. 主鍵（Primary Key, PK）：
				主鍵是一個欄位或一組欄位，其值在一個資料表中是唯一的，可以用來唯一標識該表中的一筆觀測值。

			2. 外鍵（Foreign Key, FK）：
				外鍵是一個欄位或一組欄位，它在一個資料表中用來參考另一個資料表的主鍵。	
*/

/*
 
2. 資料的對應關係：
	
	1. 一對一（one-on-one） 1:1
		1. 演員的編號（actors.id)與其名（actors.name)
		2. 導演的編號（directors.id）與其名（directors.name)
	
	2. 一對多（one-on-many）1:n
		locations 資料表：一個國家會有多個省份、州別
	
	3. 多對多（many-on-many) n:m
		兩個資料表的多對多關係會加入一個橋接資料表（Bridge table）作為中介，進而將一個「多對多關係」轉換為兩個「一對多關係」。
		1. 電影與演員的橋接資料表：movies_actors
		2. 電影與導演的橋接資料表：movies_directors
/*

/*
 
 3. 實體關係圖（Entity Relationship Diagram, ER-Diagram）
 
 	1. 實體（Entities）：
 		實體可以理解為資料庫中的「資料表」，在實體關係圖中，這些實體通常以矩形框表示。
 	
 	2. 屬性（Attributes）：
 		屬性是實體的特徵或性質，對應於資料表中的欄位（column），屬性通常以圓形或橢圓形表示，並且連接到相關的實體。
 		
 	3. 主鍵（Primary Key）：
 		在實體關係圖中，主鍵通常會在屬性旁加上下劃線，或者用特殊的符號來表示它的唯一性。
 		
 	4. 關係（Relationships）：
 		關係描述了實體之間的邏輯連接或相互作用。例如，「學生」和「課程」實體之間可能存在「選修」關係，表示學生可以選修課程。
 		在實體關係圖中，關係通常以菱形表示，並通過線條連接相關的實體。
 
 	5. 連接鍵（Foreign Key）：
 		連接鍵是指一個資料表中的欄位，這個欄位在另一個資料表中是主鍵。連接鍵用於建立資料表之間的關聯。
 			例如：「選修」表中可能包含「學生ID」和「課程ID」，這兩者都是來自其他表的主鍵，在「選修」表中作為連接鍵使用。
 		在實體關係圖中，連接鍵會以類似的方式標註，通常會與關係一起表示。 
 */

/*

4. 資料表之間的連線與圖示：

	在實體關係圖（ER-Diagram），資料表之間的連線及其圖示主要用來表示實體之間的關係以及這些關係的強度（強關係或弱關係）和基數（Cardinality，表示實體之間的數量關係）。
	
	1. 強關係（Strong Relationship）：
		這種關係出現在實體具有自己的主鍵且彼此之間的連接不依賴於其他實體時。這種關係通常表現為「實線」，代表兩個實體都具有獨立的主鍵。
		
	2. 弱關係（Weak Relationship）：
		弱關係存在於某個實體沒有足夠的屬性來作為主鍵，並且依賴於另一個實體來形成其主鍵的情況下。
		弱實體（Weak Entity）通常用雙線矩形來表示，而其關係用雙線菱形來表示，指示這是一個必須依賴於父實體才能存在的實體。
		
	3. 關係的基數（Cardinality）
		1. 一對一：連接兩端各有一個「單個接腳」
		2. 一對多：一端使用「單個接腳」，另一端使用「三叉戟」接腳
		3. 多對多：通常需要一個「中介實體」來分解多對多關係成兩個一對多關係
*/

/*

5. 正規化（Normalization）

	1. 消除資料冗餘：
		減少資料庫中不必要的資料重複，以避免資料異常（Anomalies），例如插入異常、刪除異常和更新異常。
		
	2. 增進資料一致性：
		確保資料庫中的資料在各個表之間的一致性。這樣在更新、刪除或插入資料時，不會產生不一致的資料狀況。
		
	3. 提升查詢效率：
		透過結構化和優化資料表，減少磁碟空間的浪費，並提高查詢性能，尤其是在大規模資料庫中。


5.1 第一正則化（1NF - First Normal Form）：
	每一行代表一個唯一的觀測值，這也意味著資料表中的【每一行必須是唯一的】，不能有重複的行。
	所有的列應該有明確的定義，不能存儲多個值或數據類型的混合。
	每一個儲存格都應該只包含一個單一值，而不是一個列表或多個值的集合(原子值（atomic values）)。
	
	
5.2 第二正規化（2NF - Second Normal Form）：
	資料表必須符合1NF的所有要求，然後，如果一個資料表的主鍵由多個欄位組成，則表中的【所有非主鍵欄位必須完全依賴於整個主鍵】，而不能僅依賴於主鍵的一部分。
	如果某些欄位只依賴於主鍵的一部分，這些欄位應該被移到另一個資料表中，並通過外鍵來維持它們之間的關聯。
	這樣做可以防止部分依賴性，確保資料庫的結構更加一致和易於維護。
	
5.3 第三正規化形式（3NF - Third Normal Form）：
	資料表必須符合2NF的所有要求，資料表中的每一個非主鍵屬性都必須直接依賴於主鍵，確保所有非主鍵欄位【只依賴於主鍵】。
	第三正規化形式的目標是消除「遞移相依」（Transitive Dependency）
	
		遞移相依的消除： 
			如果一個非主鍵屬性是依賴於另一個非主鍵屬性，而這個非主鍵屬性又依賴於主鍵，這種情況下就存在遞移相依。
			為了消除這種依賴性，需要將這些屬性拆分到一個新的資料表中，並通過外鍵來維持與原資料表的關聯。

*/



















